function dn42_update_latency(int link_latency) {
  bgp_community.add((64511, link_latency));
       if (64511, 9) ~ bgp_community then { bgp_community.delete([(64511, 1..8)]); return 9; }
  else if (64511, 8) ~ bgp_community then { bgp_community.delete([(64511, 1..7)]); return 8; }
  else if (64511, 7) ~ bgp_community then { bgp_community.delete([(64511, 1..6)]); return 7; }
  else if (64511, 6) ~ bgp_community then { bgp_community.delete([(64511, 1..5)]); return 6; }
  else if (64511, 5) ~ bgp_community then { bgp_community.delete([(64511, 1..4)]); return 5; }
  else if (64511, 4) ~ bgp_community then { bgp_community.delete([(64511, 1..3)]); return 4; }
  else if (64511, 3) ~ bgp_community then { bgp_community.delete([(64511, 1..2)]); return 3; }
  else if (64511, 2) ~ bgp_community then { bgp_community.delete([(64511, 1..1)]); return 2; }
  else return 1;
}

function dn42_update_bandwidth(int link_bandwidth) {
  bgp_community.add((64511, link_bandwidth));
       if (64511, 21) ~ bgp_community then { bgp_community.delete([(64511, 22..29)]); return 21; }
  else if (64511, 22) ~ bgp_community then { bgp_community.delete([(64511, 23..29)]); return 22; }
  else if (64511, 23) ~ bgp_community then { bgp_community.delete([(64511, 24..29)]); return 23; }
  else if (64511, 24) ~ bgp_community then { bgp_community.delete([(64511, 25..29)]); return 24; }
  else if (64511, 25) ~ bgp_community then { bgp_community.delete([(64511, 26..29)]); return 25; }
  else if (64511, 26) ~ bgp_community then { bgp_community.delete([(64511, 27..29)]); return 26; }
  else if (64511, 27) ~ bgp_community then { bgp_community.delete([(64511, 28..29)]); return 27; }
  else if (64511, 28) ~ bgp_community then { bgp_community.delete([(64511, 29..29)]); return 28; }
  else return 29;
}

function dn42_update_crypto(int link_crypto) {
  bgp_community.add((64511, link_crypto));
       if (64511, 31) ~ bgp_community then { bgp_community.delete([(64511, 32..34)]); return 31; }
  else if (64511, 32) ~ bgp_community then { bgp_community.delete([(64511, 33..34)]); return 32; }
  else if (64511, 33) ~ bgp_community then { bgp_community.delete([(64511, 34..34)]); return 33; }
  else return 34;
}

function dn42_get_region() {
       if (64511, 41) ~ bgp_community then { return 41; }
  else if (64511, 42) ~ bgp_community then { return 42; }
  else if (64511, 43) ~ bgp_community then { return 43; }
  else if (64511, 44) ~ bgp_community then { return 44; }
  else if (64511, 45) ~ bgp_community then { return 45; }
  else if (64511, 46) ~ bgp_community then { return 46; }
  else if (64511, 47) ~ bgp_community then { return 47; }
  else if (64511, 48) ~ bgp_community then { return 48; }
  else if (64511, 49) ~ bgp_community then { return 49; }
  else if (64511, 50) ~ bgp_community then { return 50; }
  else if (64511, 51) ~ bgp_community then { return 51; }
  else if (64511, 52) ~ bgp_community then { return 52; }
  else if (64511, 53) ~ bgp_community then { return 53; }
  else return 0;
}

function dn42_update_flags(int link_latency; int link_bandwidth; int link_crypto)
int dn42_latency;
int dn42_bandwidth;
int dn42_crypto;
{
  dn42_latency = dn42_update_latency(link_latency);
  dn42_bandwidth = dn42_update_bandwidth(link_bandwidth) - 20;
  dn42_crypto = dn42_update_crypto(link_crypto) - 30;
  if source != RTS_BGP then { bgp_community.add((64511, DN42_REGION)); }

  bgp_local_pref = 200;

  if dn42_get_region() = DN42_REGION && dn42_latency <= 5 then {
    bgp_local_pref = bgp_local_pref + 100;
  }

  bgp_local_pref = bgp_local_pref - dn42_latency;
  bgp_local_pref = bgp_local_pref - 10 * bgp_path.len;

  return true;
}
