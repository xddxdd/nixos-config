diff --git a/nixos/doc/manual/release-notes/rl-2511.section.md b/nixos/doc/manual/release-notes/rl-2511.section.md
index ea72486c0273db..88ae9dbd716231 100644
--- a/nixos/doc/manual/release-notes/rl-2511.section.md
+++ b/nixos/doc/manual/release-notes/rl-2511.section.md
@@ -62,6 +62,8 @@
 
 - [SuiteNum√©rique Meet](https://github.com/suitenumerique/meet) is an open source alternative to Google Meet and Zoom powered by LiveKit: HD video calls, screen sharing, and chat features. Built with Django and React. Available as [services.lasuite-meet](#opt-services.lasuite-meet.enable).
 
+- [SillyTavern](https://sillytavern.app/), LLM Frontend for Power Users. Available as [services.sillytavern](#opt-services.sillytavern.enable).
+
 ## Backward Incompatibilities {#sec-release-25.11-incompatibilities}
 
 <!-- To avoid merge conflicts, consider adding your item at an arbitrary place in the list instead. -->
diff --git a/nixos/modules/module-list.nix b/nixos/modules/module-list.nix
index 0ec81e5bcb7b09..5572916e99fc49 100644
--- a/nixos/modules/module-list.nix
+++ b/nixos/modules/module-list.nix
@@ -1665,6 +1665,7 @@
   ./services/web-apps/sftpgo.nix
   ./services/web-apps/sharkey.nix
   ./services/web-apps/shiori.nix
+  ./services/web-apps/sillytavern.nix
   ./services/web-apps/silverbullet.nix
   ./services/web-apps/simplesamlphp.nix
   ./services/web-apps/slskd.nix
diff --git a/nixos/modules/services/web-apps/sillytavern.nix b/nixos/modules/services/web-apps/sillytavern.nix
new file mode 100644
index 00000000000000..2954336a664944
--- /dev/null
+++ b/nixos/modules/services/web-apps/sillytavern.nix
@@ -0,0 +1,173 @@
+{
+  config,
+  lib,
+  pkgs,
+  ...
+}:
+
+let
+  cfg = config.services.sillytavern;
+  defaultUser = "sillytavern";
+  defaultGroup = "sillytavern";
+in
+{
+  meta.maintainers = [
+    lib.maintainers.wrvsrx
+    lib.maintainers.A1ca7raz
+  ];
+
+  options = {
+    services.sillytavern = {
+      enable = lib.mkEnableOption "sillytavern";
+
+      user = lib.mkOption {
+        type = lib.types.str;
+        default = defaultUser;
+        description = ''
+          User account under which the web-application run.
+        '';
+      };
+      group = lib.mkOption {
+        type = lib.types.str;
+        default = defaultGroup;
+        description = ''
+          Group account under which the web-application run.
+        '';
+      };
+
+      package = lib.mkOption {
+        type = lib.types.package;
+        default = pkgs.sillytavern;
+        defaultText = "pkgs.sillytavern";
+        description = ''
+          Sillytavern package to use.
+        '';
+      };
+
+      configFile = lib.mkOption {
+        type = lib.types.path;
+        default = "${pkgs.sillytavern}/opt/sillytavern/config.yaml";
+        defaultText = lib.literalExpression "\${pkgs.sillytavern}/opt/sillytavern/config.yaml";
+        description = ''
+          Path to the SillyTavern configuration file.
+        '';
+      };
+
+      port = lib.mkOption {
+        type = lib.types.nullOr lib.types.port;
+        default = null;
+        example = 8045;
+        description = ''
+          Port on which SillyTavern will listen.
+        '';
+      };
+
+      listenAddressIPv4 = lib.mkOption {
+        type = lib.types.nullOr lib.types.str;
+        default = null;
+        example = "127.0.0.1";
+        description = ''
+          Specific IPv4 address to listen to.
+        '';
+      };
+
+      listenAddressIPv6 = lib.mkOption {
+        type = lib.types.nullOr lib.types.str;
+        default = null;
+        example = "::1";
+        description = ''
+          Specific IPv6 address to listen to.
+        '';
+      };
+
+      listen = lib.mkOption {
+        type = lib.types.nullOr lib.types.bool;
+        default = null;
+        example = true;
+        description = ''
+          Whether to listen on all network interfaces.
+        '';
+      };
+
+      whitelist = lib.mkOption {
+        type = lib.types.nullOr lib.types.bool;
+        default = null;
+        example = true;
+        description = ''
+          Enables whitelist mode.
+        '';
+      };
+    };
+  };
+
+  config = lib.mkIf cfg.enable {
+    systemd.services.sillytavern = {
+      description = "Silly Tavern";
+      after = [ "network.target" ];
+      wantedBy = [ "multi-user.target" ];
+      # required by sillytavern's extension manager
+      path = [ pkgs.git ];
+      serviceConfig = {
+        Type = "simple";
+        ExecStart =
+          let
+            f = x: name: lib.optional (x != null) "--${name}=${builtins.toString x}";
+          in
+          lib.concatStringsSep " " (
+            [
+              "${lib.getExe pkgs.sillytavern}"
+              "--dataRoot=%S/sillytavern/data"
+              "--configPath=${cfg.configFile}"
+            ]
+            ++ f cfg.port "port"
+            ++ f cfg.listen "listen"
+            ++ f cfg.listenAddressIPv4 "listenAddressIPv4"
+            ++ f cfg.listenAddressIPv6 "listenAddressIPv6"
+            ++ f cfg.whitelist "whitelist"
+          );
+        User = cfg.user;
+        Group = cfg.group;
+        Restart = "always";
+        StateDirectory = "sillytavern";
+        BindPaths = [
+          "%S/sillytavern/extensions:${pkgs.sillytavern}/opt/sillytavern/public/scripts/extensions/third-party"
+        ];
+
+        # Security hardening
+        CapabilityBoundingSet = [ "" ];
+        LockPersonality = true;
+        NoNewPrivileges = true;
+        PrivateDevices = true;
+        PrivateTmp = true;
+        ProtectClock = true;
+        ProtectControlGroups = true;
+        ProtectHome = true;
+        ProtectHostname = true;
+        ProtectKernelLogs = true;
+        ProtectKernelModules = true;
+        ProtectKernelTunables = true;
+        ProtectProc = "invisible";
+        ProtectSystem = "strict";
+      };
+    };
+
+    users.users.${cfg.user} = lib.mkIf (cfg.user == defaultUser) {
+      description = "sillytavern service user";
+      isSystemUser = true;
+      inherit (cfg) group;
+    };
+
+    users.groups.${cfg.group} = lib.mkIf (cfg.group == defaultGroup) { };
+
+    systemd.tmpfiles.settings.sillytavern = {
+      "/var/lib/sillytavern/data".d = {
+        mode = "0700";
+        inherit (cfg) user group;
+      };
+      "/var/lib/sillytavern/extensions".d = {
+        mode = "0700";
+        inherit (cfg) user group;
+      };
+    };
+  };
+}
