diff --git a/providers/gcore/convert.go b/providers/gcore/convert.go
index b5c1cc6b..b57b9564 100644
--- a/providers/gcore/convert.go
+++ b/providers/gcore/convert.go
@@ -86,7 +86,7 @@ func recordsToNative(rcs []*models.RecordConfig, expectedKey models.RecordKey) *
 			}
 		case "TXT": // Avoid double quoting for TXT records
 			rr = dnssdk.ResourceRecord{
-				Content: convertTxtSliceToSdkAnySlice(r.GetTargetTXTSegmented()),
+				Content: convertTxtSliceToSdkAnySlice(r.GetTargetTXTJoined()),
 				Meta:    nil,
 				Enabled: true,
 			}
@@ -119,11 +119,8 @@ func recordsToNative(rcs []*models.RecordConfig, expectedKey models.RecordKey) *
 	return result
 }
 
-func convertTxtSliceToSdkAnySlice(records []string) []any {
-	result := []any{}
-	for _, record := range records {
-		result = append(result, record)
-	}
+func convertTxtSliceToSdkAnySlice(record string) []any {
+	result := []any{record}
 	return result
 }
 
diff --git a/providers/gcore/gcoreProvider.go b/providers/gcore/gcoreProvider.go
index 81d2fceb..357c7c4b 100644
--- a/providers/gcore/gcoreProvider.go
+++ b/providers/gcore/gcoreProvider.go
@@ -43,7 +43,7 @@ func NewGCore(m map[string]string, metadata json.RawMessage) (providers.DNSServi
 var features = providers.DocumentationNotes{
 	providers.CanAutoDNSSEC:          providers.Cannot(),
 	providers.CanGetZones:            providers.Can(),
-	providers.CanUseAlias:            providers.Cannot(),
+	providers.CanUseAlias:            providers.Can(),
 	providers.CanUseCAA:              providers.Can(),
 	providers.CanUseDS:               providers.Cannot(),
 	providers.CanUseLOC:              providers.Cannot(),
@@ -136,6 +136,13 @@ func (c *gcoreProvider) GetZoneRecordsCorrections(dc *models.DomainConfig, exist
 	var deletions []*models.Correction
 	var reports []*models.Correction
 
+	// Gcore auto uses ALIAS for apex zone CNAME records, just like CloudFlare
+	for _, rec := range dc.Records {
+		if rec.Type == "ALIAS" {
+			rec.Type = "CNAME"
+		}
+	}
+
 	changes, err := diff2.ByRecordSet(existing, dc, nil)
 	if err != nil {
 		return nil, err
